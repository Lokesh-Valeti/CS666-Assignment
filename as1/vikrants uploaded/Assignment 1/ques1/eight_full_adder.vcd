$date
	Tue Aug 15 18:25:27 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module eight_bit_full_adder_test $end
$var wire 8 ! Sum [7:0] $end
$var wire 1 " Cout $end
$var reg 8 # A [7:0] $end
$var reg 8 $ B [7:0] $end
$var reg 1 % Cin $end
$scope module g $end
$var wire 8 & A [7:0] $end
$var wire 8 ' B [7:0] $end
$var wire 1 % Cin $end
$var wire 1 ( t6 $end
$var wire 1 ) t5 $end
$var wire 1 * t4 $end
$var wire 1 + t3 $end
$var wire 1 , t2 $end
$var wire 1 - t1 $end
$var wire 1 . t0 $end
$var wire 8 / Sum [7:0] $end
$var wire 1 " Cout $end
$scope module f1 $end
$var wire 1 0 A $end
$var wire 1 1 B $end
$var wire 1 % Cin $end
$var wire 1 . Cout $end
$var wire 1 2 Sum $end
$var wire 1 3 t1 $end
$var wire 1 4 t2 $end
$var wire 1 5 t3 $end
$upscope $end
$scope module f2 $end
$var wire 1 6 A $end
$var wire 1 7 B $end
$var wire 1 . Cin $end
$var wire 1 - Cout $end
$var wire 1 8 Sum $end
$var wire 1 9 t1 $end
$var wire 1 : t2 $end
$var wire 1 ; t3 $end
$upscope $end
$scope module f3 $end
$var wire 1 < A $end
$var wire 1 = B $end
$var wire 1 - Cin $end
$var wire 1 , Cout $end
$var wire 1 > Sum $end
$var wire 1 ? t1 $end
$var wire 1 @ t2 $end
$var wire 1 A t3 $end
$upscope $end
$scope module f4 $end
$var wire 1 B A $end
$var wire 1 C B $end
$var wire 1 , Cin $end
$var wire 1 + Cout $end
$var wire 1 D Sum $end
$var wire 1 E t1 $end
$var wire 1 F t2 $end
$var wire 1 G t3 $end
$upscope $end
$scope module f5 $end
$var wire 1 H A $end
$var wire 1 I B $end
$var wire 1 + Cin $end
$var wire 1 * Cout $end
$var wire 1 J Sum $end
$var wire 1 K t1 $end
$var wire 1 L t2 $end
$var wire 1 M t3 $end
$upscope $end
$scope module f6 $end
$var wire 1 N A $end
$var wire 1 O B $end
$var wire 1 * Cin $end
$var wire 1 ) Cout $end
$var wire 1 P Sum $end
$var wire 1 Q t1 $end
$var wire 1 R t2 $end
$var wire 1 S t3 $end
$upscope $end
$scope module f7 $end
$var wire 1 T A $end
$var wire 1 U B $end
$var wire 1 ) Cin $end
$var wire 1 ( Cout $end
$var wire 1 V Sum $end
$var wire 1 W t1 $end
$var wire 1 X t2 $end
$var wire 1 Y t3 $end
$upscope $end
$scope module f8 $end
$var wire 1 Z A $end
$var wire 1 [ B $end
$var wire 1 ( Cin $end
$var wire 1 " Cout $end
$var wire 1 \ Sum $end
$var wire 1 ] t1 $end
$var wire 1 ^ t2 $end
$var wire 1 _ t3 $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xV
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xD
xC
xB
xA
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
bx /
x.
x-
x,
x+
x*
x)
x(
bx '
bx &
x%
bx $
bx #
x"
bx !
$end
#5
1>
0D
0J
0P
0V
0\
08
0:
0;
1-
0,
0+
0*
0)
0(
0"
0.
0@
0F
0L
0R
0X
0^
03
19
0?
0A
0E
0G
0K
0M
0Q
0S
0W
0Y
0]
0_
b101 !
b101 /
12
04
05
11
17
0=
0C
0I
0O
0U
0[
00
16
0<
0B
0H
0N
0T
0Z
0%
b11 $
b11 '
b10 #
b10 &
